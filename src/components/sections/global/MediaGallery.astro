---
import { urlFor } from "../../../utils/sanityClient";

const { content } = Astro.props;
console.log(content.media[0])
---
<section data-inverted={content.invertTextColor ? "true" : "false"} class="media-gallery" style={`background-color:${content.backgroundColor ? content.backgroundColor.hex : 'transparent'}`}>
  <div class="media">
    <!-- <div class="assets-scroller"> -->
      {content.media.map((media, i) => {
        if (media.videoURL) {
          return (
            <video 
              class="asset"
              src={media.videoURL}
              poster={urlFor(media.image).width(400).auto('format').url()}
              loop
              muted
              autoplay
              playsinline
              onloadedmetadata="this.muted = true"
            />
          )
        } else {
          return (
            <img
              class="asset"
              width={media.imageMetadata.dimensions.width}
              height={media.imageMetadata.dimensions.height}
              src={urlFor(media.image).auto('format').url()}
            />
          )
        }
        
      })}
    <!-- </div> -->
  </div>
  {content.heading &&
    <div class="section-title">
      <h2 class="heading h3">{content.heading}</h2>
      <p class="description">{content.description}</p>
    </div>
  }
</section>

<script>
  import { throttle } from '../../../utils/functions'
  const container = document.querySelector(".media");

  const throttleDelayMs = 15
  const dragSensitivity = 2

  let startX;
  let isDown;
  let scrollerWidth
  let viewportWidth
  let scrollDistance
  let moveDistance;

  const measureElements = () => {
    viewportWidth = window.innerWidth
    scrollDistance = scrollerWidth - viewportWidth
  }
  measureElements()

  const throttleUpdateScroll = throttle(() => {
      container.scrollLeft += moveDistance
  }, throttleDelayMs)

  const handleMouseDown = (e) => {
    isDown = true;
    container.classList.add("active")
    startX = e.clientX
  }

  const handleMouseUp = (e) => {
    isDown = false;
    container.classList.remove("active")
  }

  const handleMouseEnter = (e) => {
    window.dispatchEvent(
      new CustomEvent("activateCursor", {
        detail: { text: "Drag"}
      })
    )
  }

  const handleMouseLeave = (e) => {
    isDown = false;
    container.classList.remove("active")
    window.dispatchEvent(
      new CustomEvent("deactivateCursor")
    )
  }

  const handleMouseMove = (e) => {
    if (isDown) {
      e.preventDefault();
      moveDistance = (startX - e.clientX) * dragSensitivity
      throttleUpdateScroll()
      startX = e.clientX
    }
  }

  container.addEventListener("mousedown", (e) => handleMouseDown(e));
  container.addEventListener("mouseup", (e) => handleMouseUp(e));
  container.addEventListener("mouseenter", (e) => handleMouseEnter(e));
  container.addEventListener("mouseleave", (e) => handleMouseLeave(e));
  container.addEventListener("mousemove", (e) => handleMouseMove(e));
  window.addEventListener("resize", measureElements)

</script>

<style>
  .media-gallery {
    padding: var(--space-2xl) 0;
    display: flex;
    flex-direction: column;
    justify-content: stretch;
    gap: var(--space-lg);
  }

  .media-gallery[data-inverted="true"] {
    color: var(--color-background);
  }

  .section-title {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    flex: 0 0 auto;
    align-self: stretch;
    position: sticky;
    left: 0;
    padding: 0 var(--page-margin);
  }

  .heading {
    max-width: 20ch;
  }

  .description {
    max-width: 50ch;
  }

  .media {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    gap: var(--space-2xl);
    gap: 5vw;
    flex: 0 0 auto;
    overflow-x: auto;
    padding: 0 var(--page-margin);
    /* scroll-behavior: smooth;
    scroll-snap-type: x proximity; */
  }

  .media:hover {
    cursor: grab;
  }

  .media.active {
    cursor: grabbing;
  }

  .asset {
    flex: 0 0 auto;
    border-radius: var(--radius-lg);
    overflow: hidden;
    min-width: 0px;
    pointer-events: none;
    user-select: none;
    scroll-snap-align: center;
    max-width: 80vw;
    max-height: 60svh;
    width: auto;
  }

  @media screen and (max-width: 768px) {
    .section-title {
      flex-direction: column;
    }

    .heading,
    .description {
      max-width: unset;
    }

  }
</style>